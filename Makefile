# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = lib/gtest-1.7.0
MOCKCPP_DIR = lib/mockcpp-2.6/lib

# Where to find user code.
USER_DIR = ../..
UT_DIR = src

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include
CPPFLAGS += -isystem $(MOCKCPP_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -DCAPWAP
GCOVFLAGS += -fprofile-arcs -ftest-coverage -fPIC

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = ut

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

MOCKCPP_HEADERS = $(MOCKCPP_DIR)/include/mockcpp/*.h                

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o *.gcov *.gcda *.gcno result/*.html

gcov:
	./lib/gcovr-3.2/scripts/gcovr -r . --html --html-details -o result/result.html

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

CAPWAP_DIR = $(USER_DIR)/capwap

CAPWAP_OBJ = $(CAPWAP_DIR)/cwDummy.o $(CAPWAP_DIR)/ac/libcwac.o \
		 $(CAPWAP_DIR)/util/libutils.o $(CAPWAP_DIR)/hostapd/libwifi.o \
		 $(CAPWAP_DIR)/../utils/libutils2.o $(CAPWAP_DIR)/./json/libjson.o \
		 $(CAPWAP_DIR)/./jsonrpc/libjsonrpc.o $(CAPWAP_DIR)/./fcldd/libfcldd.o \
		 $(CAPWAP_DIR)/../openssl/libssl.a $(CAPWAP_DIR)/../openssl/libcrypto.a

CAPWAPFLAGS = -I$(CAPWAP_DIR)/include -I$(CAPWAP_DIR)/hostapd -I$(USER_DIR)/include

all_ut.o : $(UT_DIR)/*.cc $(GTEST_HEADERS) $(MOCKCPP_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(CAPWAPFLAGS) $(GCOVFLAGS) -c $(UT_DIR)/all_ut.cc

ut : all_ut.o $(CAPWAP_OBJ) gtest_main.a $(MOCKCPP_DIR)/lib/libmockcpp.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(GCOVFLAGS) -lm -lmysqlclient -L/usr/lib64/mysql -L/usr/lib64/ -ldl -lpthread $^ -o $@